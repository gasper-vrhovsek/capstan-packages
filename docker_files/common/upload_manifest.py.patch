diff --git a/scripts/upload_manifest.py b/scripts/upload_manifest.py
index de570f0..1e21d94 100755
--- a/scripts/upload_manifest.py
+++ b/scripts/upload_manifest.py
@@ -1,6 +1,6 @@
 #!/usr/bin/python
 
-import os, optparse, io, subprocess, socket, threading, stat, sys, re
+import os, optparse, io, subprocess, socket, threading, stat, sys, re, shutil
 
 try:
     import StringIO
@@ -71,7 +71,7 @@ def read_manifest(fn):
 def upload(osv, manifest, depends):
     manifest = [(x, y % defines) for (x, y) in manifest]
     files = list(expand(manifest))
-    files = [(x, unsymlink(y)) for (x, y) in files]
+    files = [(x, unsymlink(y % defines)) for (x, y) in files]
 
     # Wait for the guest to come up and tell us it's listening
     while True:
@@ -167,6 +167,61 @@ def upload(osv, manifest, depends):
     s.recv(1)
     s.close()
 
+# This will export the package based on the provided manifest file. It uses the same mechanism to
+# get the files that need copying as the actual upload process. The only current limitation is
+# support for links in OSv, e.g., /etc/mnttab: ->/proc/mounts.
+def export_package(manifest, dest):
+    abs_dest = os.path.abspath(dest)
+
+    files = list(expand(manifest))
+    files = [(x, unsymlink(y % defines)) for (x, y) in files]
+
+    # Create the base directory where we are going to put all package files.
+    if not os.path.exists(abs_dest):
+        os.makedirs(abs_dest)
+
+    for name, hostname in files:
+        name = name[1:] if name.startswith("/") else name
+        name = os.path.join(abs_dest, name)
+
+        if hostname.startswith("->"):
+            link_source = hostname[2:]
+            target_dir = os.path.dirname(name)
+
+            if link_source.startswith("/"):
+                link_source = os.path.join(abs_dest, link_source[1:])
+            else:
+                link_source = os.path.abspath(os.path.join(target_dir, link_source))
+
+            link_source = os.path.relpath(link_source, target_dir)
+
+            if not os.path.exists(target_dir):
+                os.makedirs(target_dir)
+
+            os.symlink(link_source, name)
+            print "[INFO] added link %s -> %s" % (name, link_source)
+
+        else:
+            # If it is a file, copy it to the target directory.
+            if os.path.isfile(hostname):
+                # Make sure the target dir exists
+                dirname = os.path.dirname(name)
+                if not os.path.exists(dirname):
+                    os.makedirs(dirname)
+
+                shutil.copy(hostname, name)
+                print "[INFO] exported %s" % name
+            elif os.path.isdir(hostname):
+                # If hostname is a dir, it is only a request to create the folder on guest. Nothing to copy.
+                if not os.path.exists(name):
+                    os.makedirs(name)
+                print "[INFO] created dir %s" % name
+
+            else:
+                # Inform the user that the rule cannot be applied. For example, this happens for links in OSv.
+                print "[ERR] unable to export %s" % hostname
+
+
 def main():
     make_option = optparse.make_option
 
@@ -190,6 +245,10 @@ def main():
                         metavar='VAR=DATA',
                         action='callback',
                         callback=add_var),
+            make_option('-e',
+                        dest='export',
+                        help='exports the contents of the usr.manifest into a given folder',
+                        metavar='FILE'),
     ])
 
     (options, args) = opt.parse_args()
@@ -199,17 +258,21 @@ def main():
         depends = file(options.depends, 'w')
     manifest = read_manifest(options.manifest)
 
-    depends.write('%s: \\\n' % (options.output,))
+    if options.export:
+        export_package(manifest, options.export)
+
+    else:
+        depends.write('%s: \\\n' % (options.output,))
 
-    image_path = os.path.abspath(options.output)
-    osv = subprocess.Popen('cd ../..; scripts/run.py --vnc none -m 512 -c1 -i %s -u -s -e "--norandom --nomount --noinit /tools/mkfs.so; /tools/cpiod.so --prefix /zfs/zfs/; /zfs.so set compression=off osv" --forward tcp:10000::10000' % image_path, shell=True, stdout=subprocess.PIPE)
+        image_path = os.path.abspath(options.output)
+        osv = subprocess.Popen('cd ../..; scripts/run.py --vnc none -m 512 -c1 -i %s -u -s -e "--norandom --nomount --noinit /tools/mkfs.so; /tools/cpiod.so --prefix /zfs/zfs/; /zfs.so set compression=off osv" --forward tcp:10000::10000' % image_path, shell=True, stdout=subprocess.PIPE)
 
-    upload(osv, manifest, depends)
+        upload(osv, manifest, depends)
 
-    osv.wait()
+        osv.wait()
 
-    depends.write('\n\n')
-    depends.close()
+        depends.write('\n\n')
+        depends.close()
 
 if __name__ == "__main__":
     main()
